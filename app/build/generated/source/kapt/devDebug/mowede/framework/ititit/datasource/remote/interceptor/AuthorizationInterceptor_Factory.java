// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package mowede.framework.ititit.datasource.remote.interceptor;

import dagger.internal.Factory;
import javax.inject.Provider;
import mowede.framework.ititit.datasource.remote.TokenServiceHelper;
import mowede.framework.ititit.usecases.Session;

public final class AuthorizationInterceptor_Factory implements Factory<AuthorizationInterceptor> {
  private final Provider<Session> sessionProvider;

  private final Provider<TokenServiceHelper> tokenServiceHelperProvider;

  private final Provider<AuthorizationInterceptor.SessionExpiredListener>
      sessionExpiredListenerProvider;

  public AuthorizationInterceptor_Factory(
      Provider<Session> sessionProvider,
      Provider<TokenServiceHelper> tokenServiceHelperProvider,
      Provider<AuthorizationInterceptor.SessionExpiredListener> sessionExpiredListenerProvider) {
    assert sessionProvider != null;
    this.sessionProvider = sessionProvider;
    assert tokenServiceHelperProvider != null;
    this.tokenServiceHelperProvider = tokenServiceHelperProvider;
    assert sessionExpiredListenerProvider != null;
    this.sessionExpiredListenerProvider = sessionExpiredListenerProvider;
  }

  @Override
  public AuthorizationInterceptor get() {
    return new AuthorizationInterceptor(
        sessionProvider.get(),
        tokenServiceHelperProvider.get(),
        sessionExpiredListenerProvider.get());
  }

  public static Factory<AuthorizationInterceptor> create(
      Provider<Session> sessionProvider,
      Provider<TokenServiceHelper> tokenServiceHelperProvider,
      Provider<AuthorizationInterceptor.SessionExpiredListener> sessionExpiredListenerProvider) {
    return new AuthorizationInterceptor_Factory(
        sessionProvider, tokenServiceHelperProvider, sessionExpiredListenerProvider);
  }
}
