// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package mowede.framework.ititit.ui.login.presenter;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;
import mowede.framework.ititit.ui.login.interactor.ServerLoginInteractor;
import mowede.framework.ititit.ui.login.interactor.SocialLoginInteractor;

public final class LoginPresenter_Factory implements Factory<LoginPresenter> {
  private final MembersInjector<LoginPresenter> loginPresenterMembersInjector;

  private final Provider<CompositeDisposable> disposableProvider;

  private final Provider<ServerLoginInteractor> serverLoginInteractorProvider;

  private final Provider<SocialLoginInteractor> socialLoginInteractorProvider;

  public LoginPresenter_Factory(
      MembersInjector<LoginPresenter> loginPresenterMembersInjector,
      Provider<CompositeDisposable> disposableProvider,
      Provider<ServerLoginInteractor> serverLoginInteractorProvider,
      Provider<SocialLoginInteractor> socialLoginInteractorProvider) {
    assert loginPresenterMembersInjector != null;
    this.loginPresenterMembersInjector = loginPresenterMembersInjector;
    assert disposableProvider != null;
    this.disposableProvider = disposableProvider;
    assert serverLoginInteractorProvider != null;
    this.serverLoginInteractorProvider = serverLoginInteractorProvider;
    assert socialLoginInteractorProvider != null;
    this.socialLoginInteractorProvider = socialLoginInteractorProvider;
  }

  @Override
  public LoginPresenter get() {
    return MembersInjectors.injectMembers(
        loginPresenterMembersInjector,
        new LoginPresenter(
            disposableProvider.get(),
            serverLoginInteractorProvider.get(),
            socialLoginInteractorProvider.get()));
  }

  public static Factory<LoginPresenter> create(
      MembersInjector<LoginPresenter> loginPresenterMembersInjector,
      Provider<CompositeDisposable> disposableProvider,
      Provider<ServerLoginInteractor> serverLoginInteractorProvider,
      Provider<SocialLoginInteractor> socialLoginInteractorProvider) {
    return new LoginPresenter_Factory(
        loginPresenterMembersInjector,
        disposableProvider,
        serverLoginInteractorProvider,
        socialLoginInteractorProvider);
  }
}
