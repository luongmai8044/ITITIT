// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package mowede.framework.ititit.ui.login.interactor;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import mowede.framework.ititit.repository.DataRepository;
import mowede.framework.ititit.util.SchedulerProvider;

public final class ServerLoginInteractor_Factory implements Factory<ServerLoginInteractor> {
  private final MembersInjector<ServerLoginInteractor> serverLoginInteractorMembersInjector;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<DataRepository> dataRepositoryProvider;

  public ServerLoginInteractor_Factory(
      MembersInjector<ServerLoginInteractor> serverLoginInteractorMembersInjector,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<DataRepository> dataRepositoryProvider) {
    assert serverLoginInteractorMembersInjector != null;
    this.serverLoginInteractorMembersInjector = serverLoginInteractorMembersInjector;
    assert schedulerProvider != null;
    this.schedulerProvider = schedulerProvider;
    assert dataRepositoryProvider != null;
    this.dataRepositoryProvider = dataRepositoryProvider;
  }

  @Override
  public ServerLoginInteractor get() {
    return MembersInjectors.injectMembers(
        serverLoginInteractorMembersInjector,
        new ServerLoginInteractor(schedulerProvider.get(), dataRepositoryProvider.get()));
  }

  public static Factory<ServerLoginInteractor> create(
      MembersInjector<ServerLoginInteractor> serverLoginInteractorMembersInjector,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<DataRepository> dataRepositoryProvider) {
    return new ServerLoginInteractor_Factory(
        serverLoginInteractorMembersInjector, schedulerProvider, dataRepositoryProvider);
  }
}
