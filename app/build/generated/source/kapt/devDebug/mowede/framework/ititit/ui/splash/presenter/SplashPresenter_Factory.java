// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package mowede.framework.ititit.ui.splash.presenter;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;
import mowede.framework.ititit.repository.UserManager;

public final class SplashPresenter_Factory implements Factory<SplashPresenter> {
  private final MembersInjector<SplashPresenter> splashPresenterMembersInjector;

  private final Provider<UserManager> userManagerProvider;

  private final Provider<CompositeDisposable> disposableProvider;

  public SplashPresenter_Factory(
      MembersInjector<SplashPresenter> splashPresenterMembersInjector,
      Provider<UserManager> userManagerProvider,
      Provider<CompositeDisposable> disposableProvider) {
    assert splashPresenterMembersInjector != null;
    this.splashPresenterMembersInjector = splashPresenterMembersInjector;
    assert userManagerProvider != null;
    this.userManagerProvider = userManagerProvider;
    assert disposableProvider != null;
    this.disposableProvider = disposableProvider;
  }

  @Override
  public SplashPresenter get() {
    return MembersInjectors.injectMembers(
        splashPresenterMembersInjector,
        new SplashPresenter(userManagerProvider.get(), disposableProvider.get()));
  }

  public static Factory<SplashPresenter> create(
      MembersInjector<SplashPresenter> splashPresenterMembersInjector,
      Provider<UserManager> userManagerProvider,
      Provider<CompositeDisposable> disposableProvider) {
    return new SplashPresenter_Factory(
        splashPresenterMembersInjector, userManagerProvider, disposableProvider);
  }
}
